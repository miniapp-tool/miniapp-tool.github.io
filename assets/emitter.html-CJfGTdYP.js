import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,e}from"./app-B12hW5Mm.js";const t={},p=e(`<ul><li><p>类型:</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">Emitter</span><span class="token generic class-name"><span class="token operator">&lt;</span>Events <span class="token keyword">extends</span> Record<span class="token operator">&lt;</span>EventType<span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span>
  all<span class="token operator">?</span><span class="token operator">:</span> EventHandlerMap<span class="token operator">&lt;</span>Events<span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> EmitterInstance<span class="token operator">&lt;</span>Events<span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><p>框架中使用的事件派发器。</p><h2 id="创建实例" tabindex="-1"><a class="header-anchor" href="#创建实例"><span>创建实例</span></a></h2><p>你需要通过调用 <code>Emitter()</code> 返回一个 Emitter 实例。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p><code>Emitter</code> 支持在调用时通过泛型传入一个 <code>Events</code> 对象来在 TypeScript 下进行类型推导。</p><p>例子</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Emitter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@mptool/enhance&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">type</span> <span class="token class-name">Events</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  foo<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  bar<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  baz<span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> emitter <span class="token operator">=</span> <span class="token generic-function"><span class="token function">Emitter</span><span class="token generic class-name"><span class="token operator">&lt;</span>Events<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// inferred as EmitterInstance&lt;Events&gt;</span>

emitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;e&#39; has inferred type &#39;string&#39;</span>

emitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error: Argument of type &#39;number&#39; is not assignable to parameter of type &#39;string&#39;. (2345)</span>

emitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;baz&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;baz&#39; should not contain event object</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="emitterinstance-all" tabindex="-1"><a class="header-anchor" href="#emitterinstance-all"><span>emitterInstance.all</span></a></h2><ul><li>类型: <code>all: EventHandlerMap&lt;Events&gt;</code></li></ul><p>事件名称到已注册处理函数的映射。</p><h2 id="emitterinstance-on" tabindex="-1"><a class="header-anchor" href="#emitterinstance-on"><span>emitterInstance.on</span></a></h2><p>为给定类型注册事件处理程序。</p><ul><li><p>类型:</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">on</span><span class="token generic class-name"><span class="token operator">&lt;</span>Key <span class="token keyword">extends</span> <span class="token keyword">keyof</span> Events<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
  type<span class="token operator">:</span> Key<span class="token punctuation">,</span>
  handler<span class="token operator">:</span> GenericEventHandler<span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>参数:</p><ul><li>type: <code>string | symbol</code> 要侦听的事件类型，或使用 <code>&#39;*&#39;</code> 监听所有事件</li><li>handler: <code>Function</code> 响应给定事件时调用的函数</li></ul></li></ul><h2 id="emitterinstance-off" tabindex="-1"><a class="header-anchor" href="#emitterinstance-off"><span>emitterInstance.off</span></a></h2><p>移除给定类型的事件处理程序。如果未传入 <code>handler</code>，则删除给定类型的所有处理程序。</p><ul><li><p>类型:</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">off</span><span class="token generic class-name"><span class="token operator">&lt;</span>Key <span class="token keyword">extends</span> <span class="token keyword">keyof</span> Events<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
  type<span class="token operator">:</span> Key<span class="token punctuation">,</span>
  handler<span class="token operator">?</span><span class="token operator">:</span> GenericEventHandler<span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>参数:</p><ul><li>type: <code>string | symbol</code> 要取消监听事件类型，或使用 <code>&#39;*&#39;</code> 取消所有事件</li><li>handler: <code>Function</code> 要删除的处理程序函数</li></ul></li></ul><h2 id="emitterinstance-emit" tabindex="-1"><a class="header-anchor" href="#emitterinstance-emit"><span>emitterInstance.emit</span></a></h2><p>调用给定类型的所有处理函数。如果存在 <code>&#39;*&#39;</code>，则会在所有处理函数调用结束后调用它。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>不支持手动触发 <code>*</code></p></div><ul><li><p>类型:</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">emit</span><span class="token generic class-name"><span class="token operator">&lt;</span>Key <span class="token keyword">extends</span> <span class="token keyword">keyof</span> Events<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>type<span class="token operator">:</span> Key<span class="token punctuation">,</span> event<span class="token operator">?</span><span class="token operator">:</span> Events<span class="token punctuation">[</span>Key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>参数:</p><ul><li>type: <code>string | symbol</code> 要取消监听事件类型，或使用 <code>&#39;*&#39;</code> 取消所有事件</li><li>event: <code>任何值</code>，推荐传入对象</li></ul></li></ul><h2 id="emitterinstance-emitasync" tabindex="-1"><a class="header-anchor" href="#emitterinstance-emitasync"><span>emitterInstance.emitAsync</span></a></h2><p>异步调用给定类型的所有处理函数。如果存在 <code>&#39;*&#39;</code>，则会在所有处理函数调用结束后调用它。</p><p>全部处理函数调用完成后，触发自身回调</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>不支持手动触发 <code>*</code></p></div><ul><li><p>类型:</p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">emitAsync</span><span class="token generic class-name"><span class="token operator">&lt;</span>Key <span class="token keyword">extends</span> <span class="token keyword">keyof</span> Events<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
  type<span class="token operator">:</span> Key<span class="token punctuation">,</span>
  event<span class="token operator">?</span><span class="token operator">:</span> Events<span class="token punctuation">[</span>Key<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>参数:</p><ul><li>type: <code>string | symbol</code> 要取消监听事件类型，或使用 <code>&#39;*&#39;</code> 取消所有事件</li><li>event: <code>任何值</code>，推荐传入对象</li></ul></li></ul>`,23),o=[p];function c(i,l){return s(),a("div",null,o)}const u=n(t,[["render",c],["__file","emitter.html.vue"]]),k=JSON.parse('{"path":"/enhance/api/emitter.html","title":"Emitter","lang":"zh-CN","frontmatter":{"title":"Emitter","order":1,"description":"类型: 框架中使用的事件派发器。 创建实例 你需要通过调用 Emitter() 返回一个 Emitter 实例。 提示 Emitter 支持在调用时通过泛型传入一个 Events 对象来在 TypeScript 下进行类型推导。 例子 emitterInstance.all 类型: all: EventHandlerMap<Events> 事件名称到已...","head":[["meta",{"property":"og:url","content":"https://miniapp-tool.github.io/enhance/api/emitter.html"}],["meta",{"property":"og:site_name","content":"MP Tool"}],["meta",{"property":"og:title","content":"Emitter"}],["meta",{"property":"og:description","content":"类型: 框架中使用的事件派发器。 创建实例 你需要通过调用 Emitter() 返回一个 Emitter 实例。 提示 Emitter 支持在调用时通过泛型传入一个 Events 对象来在 TypeScript 下进行类型推导。 例子 emitterInstance.all 类型: all: EventHandlerMap<Events> 事件名称到已..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-03-30T11:11:50.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:modified_time","content":"2024-03-30T11:11:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Emitter\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-03-30T11:11:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"创建实例","slug":"创建实例","link":"#创建实例","children":[]},{"level":2,"title":"emitterInstance.all","slug":"emitterinstance-all","link":"#emitterinstance-all","children":[]},{"level":2,"title":"emitterInstance.on","slug":"emitterinstance-on","link":"#emitterinstance-on","children":[]},{"level":2,"title":"emitterInstance.off","slug":"emitterinstance-off","link":"#emitterinstance-off","children":[]},{"level":2,"title":"emitterInstance.emit","slug":"emitterinstance-emit","link":"#emitterinstance-emit","children":[]},{"level":2,"title":"emitterInstance.emitAsync","slug":"emitterinstance-emitasync","link":"#emitterinstance-emitasync","children":[]}],"git":{"createdTime":1711797110000,"updatedTime":1711797110000,"contributors":[{"name":"renovate[bot]","email":"29139614+renovate[bot]@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":1.7,"words":509},"filePathRelative":"enhance/api/emitter.md","localizedDate":"2024年3月30日","autoDesc":true,"excerpt":"<ul>\\n<li>\\n<p>类型:</p>\\n<div class=\\"language-typescript\\" data-ext=\\"ts\\" data-title=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token generic-function\\"><span class=\\"token function\\">Emitter</span><span class=\\"token generic class-name\\"><span class=\\"token operator\\">&lt;</span>Events <span class=\\"token keyword\\">extends</span> Record<span class=\\"token operator\\">&lt;</span>EventType<span class=\\"token punctuation\\">,</span> <span class=\\"token builtin\\">unknown</span><span class=\\"token operator\\">&gt;&gt;</span></span></span><span class=\\"token punctuation\\">(</span>\\n  all<span class=\\"token operator\\">?</span><span class=\\"token operator\\">:</span> EventHandlerMap<span class=\\"token operator\\">&lt;</span>Events<span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">,</span>\\n<span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> EmitterInstance<span class=\\"token operator\\">&lt;</span>Events<span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">;</span>\\n</code></pre></div></li>\\n</ul>"}');export{u as comp,k as data};
