import{d as n}from"./app.ab7efe47.js";const s={},a=n('<h1 id="emitter" tabindex="-1"><a class="header-anchor" href="#emitter" aria-hidden="true">#</a> $Emitter</h1><ul><li><p>类型:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">$Emitter</span><span class="token generic class-name"><span class="token operator">&lt;</span>Events <span class="token keyword">extends</span> Record<span class="token operator">&lt;</span>EventType<span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span>\n  all<span class="token operator">?</span><span class="token operator">:</span> EventHandlerMap<span class="token operator">&lt;</span>Events<span class="token operator">&gt;</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> Emitter<span class="token operator">&lt;</span>Events<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><p>框架中使用的事件派发器。</p><h2 id="创建实例" tabindex="-1"><a class="header-anchor" href="#创建实例" aria-hidden="true">#</a> 创建实例</h2><p>你需要通过调用 <code>$Emitter()</code> 返回一个 Emitter 实例。</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>$Emitter 支持在调用时通过泛型传入一个 <code>Events</code> 对象来在 TypeScript 下进行类型推导。</p><p>例子</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> $Emitter <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@mptool/enhance&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Events</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  foo<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  bar<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  baz<span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> emitter <span class="token operator">=</span> <span class="token generic-function"><span class="token function">$Emitter</span><span class="token generic class-name"><span class="token operator">&lt;</span>Events<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// inferred as Emitter&lt;Events&gt;</span>\n\nemitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;e&#39; has inferred type &#39;string&#39;</span>\n\nemitter<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error: Argument of type &#39;number&#39; is not assignable to parameter of type &#39;string&#39;. (2345)</span>\n\nemitter<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;baz&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;baz&#39; should not contain event object</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></div><h2 id="emitterinstance-all" tabindex="-1"><a class="header-anchor" href="#emitterinstance-all" aria-hidden="true">#</a> emitterInstance.all</h2><ul><li>类型: <code>all: EventHandlerMap&lt;Events&gt;</code></li></ul><p>事件名称到已注册处理函数的映射。</p><h2 id="emitterinstance-on" tabindex="-1"><a class="header-anchor" href="#emitterinstance-on" aria-hidden="true">#</a> emitterInstance.on</h2><p>为给定类型注册事件处理程序。</p><ul><li><p>类型:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">on</span><span class="token generic class-name"><span class="token operator">&lt;</span>Key <span class="token keyword">extends</span> <span class="token keyword">keyof</span> Events<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  type<span class="token operator">:</span> Key<span class="token punctuation">,</span>\n  handler<span class="token operator">:</span> GenericEventHandler\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>参数:</p><ul><li>type: <code>string | symbol</code> 要侦听的事件类型，或使用 <code>&#39;*&#39;</code> 监听所有事件</li><li>handler: <code>Function</code> 响应给定事件时调用的函数</li></ul></li></ul><h2 id="emitterinstance-off" tabindex="-1"><a class="header-anchor" href="#emitterinstance-off" aria-hidden="true">#</a> emitterInstance.off</h2><p>移除给定类型的事件处理程序。如果未传入 <code>handler</code>，则删除给定类型的所有处理程序。</p><ul><li><p>类型:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">off</span><span class="token generic class-name"><span class="token operator">&lt;</span>Key <span class="token keyword">extends</span> <span class="token keyword">keyof</span> Events<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  type<span class="token operator">:</span> Key<span class="token punctuation">,</span>\n  handler<span class="token operator">?</span><span class="token operator">:</span> GenericEventHandler\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>参数:</p><ul><li>type: <code>string | symbol</code> 要取消监听事件类型，或使用 <code>&#39;*&#39;</code> 取消所有事件</li><li>handler: <code>Function</code> 要删除的处理程序函数</li></ul></li></ul><h2 id="emitterinstance-emit" tabindex="-1"><a class="header-anchor" href="#emitterinstance-emit" aria-hidden="true">#</a> emitterInstance.emit</h2><p>调用给定类型的所有处理函数。如果存在 <code>&#39;*&#39;</code>，则会在所有处理函数调用结束后调用它。</p><div class="custom-container warning"><p class="custom-container-title">注意</p><p>不支持手动触发 <code>*</code></p></div><ul><li><p>类型:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">emit</span><span class="token generic class-name"><span class="token operator">&lt;</span>Key <span class="token keyword">extends</span> <span class="token keyword">keyof</span> Events<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>type<span class="token operator">:</span> Key<span class="token punctuation">,</span> event<span class="token operator">?</span><span class="token operator">:</span> Events<span class="token punctuation">[</span>Key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>参数:</p><ul><li>type: <code>string | symbol</code> 要取消监听事件类型，或使用 <code>&#39;*&#39;</code> 取消所有事件</li><li>event: <code>任何值</code>，推荐传入对象</li></ul></li></ul><h2 id="emitterinstance-emitasync" tabindex="-1"><a class="header-anchor" href="#emitterinstance-emitasync" aria-hidden="true">#</a> emitterInstance.emitAsync</h2><p>异步调用给定类型的所有处理函数。如果存在 <code>&#39;*&#39;</code>，则会在所有处理函数调用结束后调用它。</p><p>全部处理函数调用完成后，触发自身回调</p><div class="custom-container warning"><p class="custom-container-title">注意</p><p>不支持手动触发 <code>*</code></p></div><ul><li><p>类型:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">emitAsync</span><span class="token generic class-name"><span class="token operator">&lt;</span>Key <span class="token keyword">extends</span> <span class="token keyword">keyof</span> Events<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  type<span class="token operator">:</span> Key<span class="token punctuation">,</span>\n  event<span class="token operator">?</span><span class="token operator">:</span> Events<span class="token punctuation">[</span>Key<span class="token punctuation">]</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>参数:</p><ul><li>type: <code>string | symbol</code> 要取消监听事件类型，或使用 <code>&#39;*&#39;</code> 取消所有事件</li><li>event: <code>任何值</code>，推荐传入对象</li></ul></li></ul>',24);s.render=function(n,s){return a};export default s;
