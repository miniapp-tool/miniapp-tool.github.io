import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as p,c as o,b as n,d as a,a as i,e as c}from"./app-kKOM6bOl.js";const r={},l=n("h1",{id:"urlsearchparams",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#urlsearchparams"},[n("span",null,"URLSearchParams")])],-1),u={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams",target:"_blank",rel:"noopener noreferrer"},m=c(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">URLSearchParams</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> params<span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>
    init<span class="token operator">?</span><span class="token operator">:</span>
      <span class="token operator">|</span> URLSearchParams
      <span class="token operator">|</span> <span class="token builtin">string</span>
      <span class="token operator">|</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>
      <span class="token operator">|</span> Iterable<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">get</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * Append a new name-value pair to the query string.
   */</span>
  <span class="token function">append</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * If \`value\` is provided, removes all name-value pairs
   * where name is \`name\` and value is \`value\`..
   *
   * If \`value\` is not provided, removes all name-value pairs whose name is \`name\`.
   */</span>
  <span class="token keyword">delete</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * Returns an ES6 \`Iterator\` over each of the name-value pairs in the query.
   * Each item of the iterator is a JavaScript \`Array\`. The first item of the \`Array\`is the \`name\`, the second item of the \`Array\` is the \`value\`.
   *
   * Alias for \`urlSearchParams[@@iterator]()\`.
   */</span>
  <span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> IterableIterator<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * Iterates over each name-value pair in the query and invokes the given function.
   *
   * \`\`\`js
   * const myURL = new URL(&#39;https://example.org/?a=b&amp;#x26;c=d&#39;);
   * myURL.searchParams.forEach((value, name, searchParams) =&gt; <span class="token punctuation">{</span>
   *   console.log(name, value, myURL.searchParams === searchParams);
   * <span class="token punctuation">}</span>);
   * // Prints:
   * //   a b true
   * //   c d true
   * \`\`\`
   * <span class="token keyword">@param</span> <span class="token parameter">fn</span> Invoked for each name-value pair in the query
   * <span class="token keyword">@param</span> <span class="token parameter">thisArg</span> To be used as \`this\` value for when \`fn\` is called
   */</span>
  <span class="token function">forEach</span><span class="token punctuation">(</span>
    <span class="token function-variable function">callbackfn</span><span class="token operator">:</span> <span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> iterable<span class="token operator">:</span> URLSearchParams<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">,</span>
    thisArg<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * Returns the value of the first name-value pair whose name is \`name\`. If there
   * are no such pairs, \`null\` is returned.
   * <span class="token keyword">@return</span> or \`null\` if there is no name-value pair with the given \`name\`.
   */</span>
  <span class="token function">get</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * Returns the values of all name-value pairs whose name is \`name\`. If there are
   * no such pairs, an empty array is returned.
   */</span>
  <span class="token function">getAll</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * Checks if the \`URLSearchParams\` object contains key-value pair(s) based on\`name\` and an optional \`value\` argument.
   *
   * If \`value\` is provided, returns \`true\` when name-value pair with
   * same \`name\` and \`value\` exists.
   *
   * If \`value\` is not provided, returns \`true\` if there is at least one name-value
   * pair whose name is \`name\`.
   */</span>
  <span class="token function">has</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * Returns an ES6 \`Iterator\` over the names of each name-value pair.
   *
   * \`\`\`js
   * const params = new URLSearchParams(&#39;foo=bar&amp;#x26;foo=baz&#39;);
   * for (const name of params.keys()) <span class="token punctuation">{</span>
   *   console.log(name);
   * <span class="token punctuation">}</span>
   * // Prints:
   * //   foo
   * //   foo
   * \`\`\`
   */</span>
  <span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> IterableIterator<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * Sets the value in the \`URLSearchParams\` object associated with \`name\` to\`value\`. If there are any pre-existing name-value pairs whose names are \`name\`,
   * set the first such pair&#39;s value to \`value\` and remove all others. If not,
   * append the name-value pair to the query string.
   *
   * \`\`\`js
   * const params = new URLSearchParams();
   * params.append(&#39;foo&#39;, &#39;bar&#39;);
   * params.append(&#39;foo&#39;, &#39;baz&#39;);
   * params.append(&#39;abc&#39;, &#39;def&#39;);
   * console.log(params.toString());
   * // Prints foo=bar&amp;#x26;foo=baz&amp;#x26;abc=def
   *
   * params.set(&#39;foo&#39;, &#39;def&#39;);
   * params.set(&#39;xyz&#39;, &#39;opq&#39;);
   * console.log(params.toString());
   * // Prints foo=def&amp;#x26;abc=def&amp;#x26;xyz=opq
   * \`\`\`
   */</span>
  <span class="token function">set</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * Sort all existing name-value pairs in-place by their names. Sorting is done
   * with a [stable sorting algorithm](https://en.wikipedia.org/wiki/Sorting_algorithm#Stability), so relative order between name-value pairs
   * with the same name is preserved.
   *
   * This method can be used, in particular, to increase cache hits.
   *
   * \`\`\`js
   * const params = new URLSearchParams(&#39;query[]=abc&amp;#x26;type=search&amp;#x26;query[]=123&#39;);
   * params.sort();
   * console.log(params.toString());
   * // Prints query%5B%5D=abc&amp;#x26;query%5B%5D=123&amp;#x26;type=search
   * \`\`\`
   */</span>
  <span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * Returns the search parameters serialized as a string, with characters
   * percent-encoded where necessary.
   */</span>
  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * Returns an ES6 \`Iterator\` over the values of each name-value pair.
   */</span>
  <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> IterableIterator<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> IterableIterator<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function d(k,v){const s=t("ExternalLinkIcon");return p(),o("div",null,[l,n("p",null,[a("更多信息请参考 "),n("a",u,[a("MDN"),i(s)])]),m])}const g=e(r,[["render",d],["__file","url-search-params.html.vue"]]),f=JSON.parse('{"path":"/net/api/url-search-params.html","title":"URLSearchParams","lang":"zh-CN","frontmatter":{"description":"URLSearchParams 更多信息请参考 MDN","head":[["meta",{"property":"og:url","content":"https://miniapp-tool.github.io/net/api/url-search-params.html"}],["meta",{"property":"og:site_name","content":"MP Tool"}],["meta",{"property":"og:title","content":"URLSearchParams"}],["meta",{"property":"og:description","content":"URLSearchParams 更多信息请参考 MDN"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-04-29T02:52:09.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:modified_time","content":"2024-04-29T02:52:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"URLSearchParams\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-04-29T02:52:09.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1714359129000,"updatedTime":1714359129000,"contributors":[{"name":"renovate[bot]","email":"29139614+renovate[bot]@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":2.08,"words":623},"filePathRelative":"net/api/url-search-params.md","localizedDate":"2024年4月29日","autoDesc":true,"excerpt":"\\n<p>更多信息请参考 <a href=\\"https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">MDN</a></p>\\n<div class=\\"language-typescript\\" data-ext=\\"ts\\" data-title=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">export</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">URLSearchParams</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">private</span> params<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token function\\">constructor</span><span class=\\"token punctuation\\">(</span>\\n    init<span class=\\"token operator\\">?</span><span class=\\"token operator\\">:</span>\\n      <span class=\\"token operator\\">|</span> URLSearchParams\\n      <span class=\\"token operator\\">|</span> <span class=\\"token builtin\\">string</span>\\n      <span class=\\"token operator\\">|</span> Record<span class=\\"token operator\\">&lt;</span><span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">,</span> <span class=\\"token builtin\\">string</span> <span class=\\"token operator\\">|</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">&gt;</span>\\n      <span class=\\"token operator\\">|</span> Iterable<span class=\\"token operator\\">&lt;</span><span class=\\"token punctuation\\">[</span><span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">,</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">get</span> <span class=\\"token function\\">size</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">number</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token doc-comment comment\\">/**\\n   * Append a new name-value pair to the query string.\\n   */</span>\\n  <span class=\\"token function\\">append</span><span class=\\"token punctuation\\">(</span>name<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">,</span> value<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token doc-comment comment\\">/**\\n   * If `value` is provided, removes all name-value pairs\\n   * where name is `name` and value is `value`..\\n   *\\n   * If `value` is not provided, removes all name-value pairs whose name is `name`.\\n   */</span>\\n  <span class=\\"token keyword\\">delete</span><span class=\\"token punctuation\\">(</span>name<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token doc-comment comment\\">/**\\n   * Returns an ES6 `Iterator` over each of the name-value pairs in the query.\\n   * Each item of the iterator is a JavaScript `Array`. The first item of the `Array`is the `name`, the second item of the `Array` is the `value`.\\n   *\\n   * Alias for `urlSearchParams[@@iterator]()`.\\n   */</span>\\n  <span class=\\"token function\\">entries</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> IterableIterator<span class=\\"token operator\\">&lt;</span><span class=\\"token punctuation\\">[</span><span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">,</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token doc-comment comment\\">/**\\n   * Iterates over each name-value pair in the query and invokes the given function.\\n   *\\n   * ```js\\n   * const myURL = new URL(\'https://example.org/?a=b&amp;#x26;c=d\');\\n   * myURL.searchParams.forEach((value, name, searchParams) =&gt; <span class=\\"token punctuation\\">{</span>\\n   *   console.log(name, value, myURL.searchParams === searchParams);\\n   * <span class=\\"token punctuation\\">}</span>);\\n   * // Prints:\\n   * //   a b true\\n   * //   c d true\\n   * ```\\n   * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">fn</span> Invoked for each name-value pair in the query\\n   * <span class=\\"token keyword\\">@param</span> <span class=\\"token parameter\\">thisArg</span> To be used as `this` value for when `fn` is called\\n   */</span>\\n  <span class=\\"token function\\">forEach</span><span class=\\"token punctuation\\">(</span>\\n    <span class=\\"token function-variable function\\">callbackfn</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">(</span>value<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">,</span> key<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">,</span> iterable<span class=\\"token operator\\">:</span> URLSearchParams<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">,</span>\\n    thisArg<span class=\\"token operator\\">?</span><span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">unknown</span><span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token doc-comment comment\\">/**\\n   * Returns the value of the first name-value pair whose name is `name`. If there\\n   * are no such pairs, `null` is returned.\\n   * <span class=\\"token keyword\\">@return</span> or `null` if there is no name-value pair with the given `name`.\\n   */</span>\\n  <span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span>name<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span> <span class=\\"token operator\\">|</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token doc-comment comment\\">/**\\n   * Returns the values of all name-value pairs whose name is `name`. If there are\\n   * no such pairs, an empty array is returned.\\n   */</span>\\n  <span class=\\"token function\\">getAll</span><span class=\\"token punctuation\\">(</span>name<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token doc-comment comment\\">/**\\n   * Checks if the `URLSearchParams` object contains key-value pair(s) based on`name` and an optional `value` argument.\\n   *\\n   * If `value` is provided, returns `true` when name-value pair with\\n   * same `name` and `value` exists.\\n   *\\n   * If `value` is not provided, returns `true` if there is at least one name-value\\n   * pair whose name is `name`.\\n   */</span>\\n  <span class=\\"token function\\">has</span><span class=\\"token punctuation\\">(</span>name<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">boolean</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token doc-comment comment\\">/**\\n   * Returns an ES6 `Iterator` over the names of each name-value pair.\\n   *\\n   * ```js\\n   * const params = new URLSearchParams(\'foo=bar&amp;#x26;foo=baz\');\\n   * for (const name of params.keys()) <span class=\\"token punctuation\\">{</span>\\n   *   console.log(name);\\n   * <span class=\\"token punctuation\\">}</span>\\n   * // Prints:\\n   * //   foo\\n   * //   foo\\n   * ```\\n   */</span>\\n  <span class=\\"token function\\">keys</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> IterableIterator<span class=\\"token operator\\">&lt;</span><span class=\\"token builtin\\">string</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token doc-comment comment\\">/**\\n   * Sets the value in the `URLSearchParams` object associated with `name` to`value`. If there are any pre-existing name-value pairs whose names are `name`,\\n   * set the first such pair\'s value to `value` and remove all others. If not,\\n   * append the name-value pair to the query string.\\n   *\\n   * ```js\\n   * const params = new URLSearchParams();\\n   * params.append(\'foo\', \'bar\');\\n   * params.append(\'foo\', \'baz\');\\n   * params.append(\'abc\', \'def\');\\n   * console.log(params.toString());\\n   * // Prints foo=bar&amp;#x26;foo=baz&amp;#x26;abc=def\\n   *\\n   * params.set(\'foo\', \'def\');\\n   * params.set(\'xyz\', \'opq\');\\n   * console.log(params.toString());\\n   * // Prints foo=def&amp;#x26;abc=def&amp;#x26;xyz=opq\\n   * ```\\n   */</span>\\n  <span class=\\"token function\\">set</span><span class=\\"token punctuation\\">(</span>name<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">,</span> value<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token doc-comment comment\\">/**\\n   * Sort all existing name-value pairs in-place by their names. Sorting is done\\n   * with a [stable sorting algorithm](https://en.wikipedia.org/wiki/Sorting_algorithm#Stability), so relative order between name-value pairs\\n   * with the same name is preserved.\\n   *\\n   * This method can be used, in particular, to increase cache hits.\\n   *\\n   * ```js\\n   * const params = new URLSearchParams(\'query[]=abc&amp;#x26;type=search&amp;#x26;query[]=123\');\\n   * params.sort();\\n   * console.log(params.toString());\\n   * // Prints query%5B%5D=abc&amp;#x26;query%5B%5D=123&amp;#x26;type=search\\n   * ```\\n   */</span>\\n  <span class=\\"token function\\">sort</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token doc-comment comment\\">/**\\n   * Returns the search parameters serialized as a string, with characters\\n   * percent-encoded where necessary.\\n   */</span>\\n  <span class=\\"token function\\">toString</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token doc-comment comment\\">/**\\n   * Returns an ES6 `Iterator` over the values of each name-value pair.\\n   */</span>\\n  <span class=\\"token function\\">values</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> IterableIterator<span class=\\"token operator\\">&lt;</span><span class=\\"token builtin\\">string</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">[</span>Symbol<span class=\\"token punctuation\\">.</span>iterator<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> IterableIterator<span class=\\"token operator\\">&lt;</span><span class=\\"token punctuation\\">[</span><span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">,</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>"}');export{g as comp,f as data};
