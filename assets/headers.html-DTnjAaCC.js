import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as e,o as p,c as o,b as n,d as s,a as c,e as l}from"./app-ZhEfIase.js";const i={},r=n("h1",{id:"headers",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#headers"},[n("span",null,"Headers")])],-1),u={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Headers",target:"_blank",rel:"noopener noreferrer"},k=l(`<div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">HeadersInit</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">|</span> Headers<span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Headers</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token punctuation">[</span><span class="token constant">NORMALIZED_HEADERS</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token punctuation">[</span><span class="token constant">RAW_HEADER_NAMES</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>init<span class="token operator">?</span><span class="token operator">:</span> HeadersInit<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * Appends a new value onto an existing header inside a \`Headers\` object, or adds the header if it does not already exist.
   */</span>
  <span class="token function">append</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * Deletes a header from the \`Headers\` object.
   */</span>
  <span class="token keyword">delete</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * Returns a \`ByteString\` sequence of all the values of a header with a given name.
   */</span>
  <span class="token function">get</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * Returns an array containing the values
   * of all Set-Cookie headers associated
   * with a response
   */</span>
  <span class="token function">getSetCookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * Returns a boolean stating whether a \`Headers\` object contains a certain header.
   */</span>
  <span class="token function">has</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * Sets a new value for an existing header inside a \`Headers\` object, or adds the header if it does not already exist.
   */</span>
  <span class="token function">set</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token doc-comment comment">/**
   * Traverses the \`Headers\` object,
   * calling the given callback for each header.
   */</span>
  <span class="token generic-function"><span class="token function">forEach</span><span class="token generic class-name"><span class="token operator">&lt;</span>ThisArg <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
    <span class="token function-variable function">callback</span><span class="token operator">:</span> <span class="token punctuation">(</span>
      <span class="token keyword">this</span><span class="token operator">:</span> ThisArg<span class="token punctuation">,</span>
      value<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
      name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
      parent<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">,</span>
    thisArg<span class="token operator">?</span><span class="token operator">:</span> ThisArg<span class="token punctuation">,</span>
  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> IterableIterator<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> IterableIterator<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> IterableIterator<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> IterableIterator<span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function d(m,v){const a=e("ExternalLinkIcon");return p(),o("div",null,[r,n("p",null,[s("更多信息请参考 "),n("a",u,[s("MDN"),c(a)]),s("。")]),k])}const h=t(i,[["render",d],["__file","headers.html.vue"]]),y=JSON.parse('{"path":"/net/api/headers.html","title":"Headers","lang":"zh-CN","frontmatter":{"description":"Headers 更多信息请参考 MDN。","head":[["meta",{"property":"og:url","content":"https://miniapp-tool.github.io/net/api/headers.html"}],["meta",{"property":"og:site_name","content":"MP Tool"}],["meta",{"property":"og:title","content":"Headers"}],["meta",{"property":"og:description","content":"Headers 更多信息请参考 MDN。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-05-11T00:34:19.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:modified_time","content":"2024-05-11T00:34:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Headers\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-05-11T00:34:19.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1715387659000,"updatedTime":1715387659000,"contributors":[{"name":"renovate[bot]","email":"29139614+renovate[bot]@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":0.69,"words":207},"filePathRelative":"net/api/headers.md","localizedDate":"2024年5月11日","autoDesc":true,"excerpt":"\\n<p>更多信息请参考 <a href=\\"https://developer.mozilla.org/zh-CN/docs/Web/API/Headers\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">MDN</a>。</p>\\n<div class=\\"language-typescript\\" data-ext=\\"ts\\" data-title=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">export</span> <span class=\\"token keyword\\">type</span> <span class=\\"token class-name\\">HeadersInit</span> <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">[</span><span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">,</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> <span class=\\"token operator\\">|</span> Record<span class=\\"token operator\\">&lt;</span><span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">,</span> <span class=\\"token builtin\\">string</span><span class=\\"token operator\\">&gt;</span> <span class=\\"token operator\\">|</span> Headers<span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">export</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Headers</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">private</span> <span class=\\"token punctuation\\">[</span><span class=\\"token constant\\">NORMALIZED_HEADERS</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">private</span> <span class=\\"token punctuation\\">[</span><span class=\\"token constant\\">RAW_HEADER_NAMES</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token function\\">constructor</span><span class=\\"token punctuation\\">(</span>init<span class=\\"token operator\\">?</span><span class=\\"token operator\\">:</span> HeadersInit<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token doc-comment comment\\">/**\\n   * Appends a new value onto an existing header inside a `Headers` object, or adds the header if it does not already exist.\\n   */</span>\\n  <span class=\\"token function\\">append</span><span class=\\"token punctuation\\">(</span>name<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">,</span> value<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token doc-comment comment\\">/**\\n   * Deletes a header from the `Headers` object.\\n   */</span>\\n  <span class=\\"token keyword\\">delete</span><span class=\\"token punctuation\\">(</span>name<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token doc-comment comment\\">/**\\n   * Returns a `ByteString` sequence of all the values of a header with a given name.\\n   */</span>\\n  <span class=\\"token function\\">get</span><span class=\\"token punctuation\\">(</span>name<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span> <span class=\\"token operator\\">|</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token doc-comment comment\\">/**\\n   * Returns an array containing the values\\n   * of all Set-Cookie headers associated\\n   * with a response\\n   */</span>\\n  <span class=\\"token function\\">getSetCookie</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token doc-comment comment\\">/**\\n   * Returns a boolean stating whether a `Headers` object contains a certain header.\\n   */</span>\\n  <span class=\\"token function\\">has</span><span class=\\"token punctuation\\">(</span>name<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">boolean</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token doc-comment comment\\">/**\\n   * Sets a new value for an existing header inside a `Headers` object, or adds the header if it does not already exist.\\n   */</span>\\n  <span class=\\"token function\\">set</span><span class=\\"token punctuation\\">(</span>name<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">,</span> value<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token doc-comment comment\\">/**\\n   * Traverses the `Headers` object,\\n   * calling the given callback for each header.\\n   */</span>\\n  <span class=\\"token generic-function\\"><span class=\\"token function\\">forEach</span><span class=\\"token generic class-name\\"><span class=\\"token operator\\">&lt;</span>ThisArg <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">this</span><span class=\\"token operator\\">&gt;</span></span></span><span class=\\"token punctuation\\">(</span>\\n    <span class=\\"token function-variable function\\">callback</span><span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">(</span>\\n      <span class=\\"token keyword\\">this</span><span class=\\"token operator\\">:</span> ThisArg<span class=\\"token punctuation\\">,</span>\\n      value<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">,</span>\\n      name<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">,</span>\\n      parent<span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">,</span>\\n    <span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">=&gt;</span> <span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">,</span>\\n    thisArg<span class=\\"token operator\\">?</span><span class=\\"token operator\\">:</span> ThisArg<span class=\\"token punctuation\\">,</span>\\n  <span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> <span class=\\"token keyword\\">void</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token function\\">keys</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> IterableIterator<span class=\\"token operator\\">&lt;</span><span class=\\"token builtin\\">string</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token function\\">values</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> IterableIterator<span class=\\"token operator\\">&lt;</span><span class=\\"token builtin\\">string</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token function\\">entries</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> IterableIterator<span class=\\"token operator\\">&lt;</span><span class=\\"token punctuation\\">[</span><span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">,</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token punctuation\\">[</span>Symbol<span class=\\"token punctuation\\">.</span>iterator<span class=\\"token punctuation\\">]</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token operator\\">:</span> IterableIterator<span class=\\"token operator\\">&lt;</span><span class=\\"token punctuation\\">[</span><span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">,</span> <span class=\\"token builtin\\">string</span><span class=\\"token punctuation\\">]</span><span class=\\"token operator\\">&gt;</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>"}');export{h as comp,y as data};
